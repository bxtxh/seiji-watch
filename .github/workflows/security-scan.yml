name: Security Scan

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 0 * * 1'  # Weekly scan on Monday

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # ===================================================
  # Container Security Scan with Trivy
  # ===================================================
  trivy-scan:
    name: Trivy Container Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - api-gateway
          - web-frontend
          - data-processor
          - diet-scraper
          - stt-worker
          - vector-store
          - notifications-worker
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build \
            --target production \
            -t ${{ matrix.service }}:scan \
            ./services/${{ matrix.service }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ matrix.service }}:scan'
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '1'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.service }}.sarif'
          category: 'trivy-${{ matrix.service }}'

  # ===================================================
  # Dependency Security Scan
  # ===================================================
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      # Python dependency scan with Safety
      - name: Python dependency scan
        run: |
          pip install safety
          for service in api-gateway data-processor diet-scraper stt-worker vector-store notifications-worker; do
            echo "Scanning $service dependencies..."
            cd services/$service
            poetry export -f requirements.txt --without-hashes | safety check --stdin --json || true
            cd ../..
          done

      # Node.js dependency scan with npm audit
      - name: Node.js dependency scan
        run: |
          cd services/web-frontend
          npm audit --json > npm-audit.json || true
          if [ -s npm-audit.json ]; then
            echo "Vulnerabilities found in Node.js dependencies:"
            cat npm-audit.json | jq '.vulnerabilities'
          fi

      # Snyk vulnerability scan (requires SNYK_TOKEN secret)
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # ===================================================
  # Secret Detection with TruffleHog
  # ===================================================
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for scanning

      - name: TruffleHog OSS scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  # ===================================================
  # SAST (Static Application Security Testing)
  # ===================================================
  sast-scan:
    name: SAST with Semgrep
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/python
            p/javascript
            p/typescript
            p/docker
          generateSarif: true

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif
          category: semgrep

  # ===================================================
  # License Compliance Check
  # ===================================================
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install license checker
        run: pip install pip-licenses

      - name: Check Python licenses
        run: |
          for service in api-gateway data-processor diet-scraper stt-worker vector-store notifications-worker; do
            echo "Checking licenses for $service..."
            cd services/$service
            pip-licenses --format=markdown --with-license-file --no-license-path > licenses.md
            # Check for problematic licenses
            if grep -E "(GPL|AGPL|LGPL)" licenses.md; then
              echo "⚠️  Found copyleft licenses in $service"
            fi
            cd ../..
          done

      - name: Check Node.js licenses
        run: |
          cd services/web-frontend
          npx license-checker --summary --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;CC0-1.0;CC-BY-3.0;CC-BY-4.0;Unlicense'

  # ===================================================
  # Infrastructure Security with Checkov
  # ===================================================
  iac-scan:
    name: Infrastructure as Code Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          quiet: false
          soft_fail: false
          framework: dockerfile,yaml
          output_format: sarif
          output_file_path: checkov.sarif
          skip_check: CKV_DOCKER_2,CKV_DOCKER_3  # Skip non-root user checks for dev

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov.sarif
          category: checkov

  # ===================================================
  # Security Report Summary
  # ===================================================
  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [trivy-scan, dependency-scan, secret-scan, sast-scan, license-check, iac-scan]
    if: always()
    steps:
      - name: Create security report
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Container Security (Trivy) | ${{ needs.trivy-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Detection | ${{ needs.secret-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| SAST (Semgrep) | ${{ needs.sast-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License Compliance | ${{ needs.license-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| IaC Security (Checkov) | ${{ needs.iac-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ All security scans completed" >> $GITHUB_STEP_SUMMARY

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '⚠️ Security scan failed! Please review the security findings.'
            })