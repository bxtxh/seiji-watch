name: Docker CI/CD Pipeline

on:
  push:
    branches:
      - main
      - "feat/**"
      - "fix/**"
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  GCP_REGION: asia-northeast1
  ARTIFACT_REGISTRY_URL: asia-northeast1-docker.pkg.dev
  JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY || 'test-jwt-secret-unified-for-ci-cd' }}
  ENVIRONMENT: testing

permissions:
  contents: read
  security-events: write

jobs:
  # ====================================
  # Docker Build & Test Job
  # ====================================
  docker-build-test:
    name: Build & Test - ${{ matrix.service }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        service:
          - api-gateway
          - web-frontend
          - data-processor
          - diet-scraper
          - stt-worker
          - vector-store
          - notifications-worker

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.service }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.service }}-
            ${{ runner.os }}-buildx-

      # Build test stage
      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          file: ./services/${{ matrix.service }}/Dockerfile
          target: test
          tags: ${{ matrix.service }}:test
          load: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      # Run tests in Docker
      - name: Run tests
        run: |
          docker run --rm \
            -e ENVIRONMENT=test \
            -e DATABASE_URL=postgresql://test:test@localhost:5432/test \
            -e REDIS_URL=redis://localhost:6379 \
            ${{ matrix.service }}:test

      # Build production image
      - name: Build production image
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          file: ./services/${{ matrix.service }}/Dockerfile
          target: production
          tags: ${{ matrix.service }}:${{ github.sha }}
          load: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            GIT_COMMIT=${{ github.sha }}
            VERSION=${{ github.ref_name }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      # Security scan with Trivy
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.service }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'  # Don't fail the build on vulnerabilities

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      # Move cache
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # ====================================
  # Integration Test Job
  # ====================================
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: docker-build-test
    permissions:
      contents: read
    
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          cp .env.example .env
          echo "DATABASE_URL=postgresql://test:test@localhost:5432/test" >> .env
          echo "REDIS_URL=redis://localhost:6379" >> .env

      - name: Run docker-compose tests
        run: |
          docker compose -f docker-compose.yml -f docker-compose.test.yml up --abort-on-container-exit --exit-code-from test-runner

  # ====================================
  # E2E Test Job
  # ====================================
  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: docker-build-test
    permissions:
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          cp .env.example .env
          echo "ENVIRONMENT=test" >> .env

      - name: Start services with Docker Compose
        run: |
          COMPOSE_PROFILES=core docker compose up -d
          
          # Wait for services to be healthy
          timeout 60 bash -c 'until docker compose ps | grep -q "healthy"; do sleep 2; done'

      - name: Run E2E tests
        run: |
          docker compose run --rm web-frontend npm run test:e2e

      - name: Collect logs on failure
        if: failure()
        run: |
          docker compose logs > docker-compose.log
          echo "::group::Docker Compose Logs"
          tail -n 500 docker-compose.log
          echo "::endgroup::"

      - name: Stop services
        if: always()
        run: docker compose down -v

  # ====================================
  # Build & Push to Registry
  # ====================================
  build-push:
    name: Build & Push Images
    runs-on: ubuntu-latest
    needs: [integration-test, e2e-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service:
          - api-gateway
          - web-frontend
          - data-processor
          - diet-scraper
          - stt-worker
          - vector-store
          - notifications-worker

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          file: ./services/${{ matrix.service }}/Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            GIT_COMMIT=${{ github.sha }}
            VERSION=${{ github.ref_name }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')

  # ====================================
  # Deploy Job (Optional)
  # ====================================
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    permissions:
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy notification
        run: |
          echo "ðŸš€ Deployment to staging would happen here"
          echo "Images are available at ghcr.io/${{ github.repository }}"
          
      # Add actual deployment steps here (e.g., to Cloud Run, Kubernetes, etc.)

# Summary:
# This workflow provides complete Docker-based CI/CD:
# 1. Builds and tests each service in isolation
# 2. Runs security scans with Trivy
# 3. Executes integration tests with docker-compose
# 4. Runs E2E tests with full stack
# 5. Pushes images to GitHub Container Registry
# 6. Ready for deployment automation